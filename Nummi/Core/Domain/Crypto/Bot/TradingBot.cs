using System.ComponentModel.DataAnnotations.Schema;
using KSUID;
using Microsoft.EntityFrameworkCore;
using Nummi.Core.Domain.Crypto.Bot.Execution;
using Nummi.Core.Domain.Crypto.Bot.Strategy;
using Nummi.Core.Util;

namespace Nummi.Core.Domain.Crypto.Bot; 

[PrimaryKey("Id")]
public class TradingBot {

    // Unique identifier for this Bot
    public Ksuid Id { get; }
    
    // Human-readable Name for this Bot
    public string Name { get; set; }
    
    // The brains of the Bot, defines what to do everytime the Bot executes
    public ITradingStrategy? Strategy { get; set; }
    
    [NotMapped]
    public bool HasTradingStrategy => Strategy != null;
    
    // How much money is available for trading
    public decimal Funds { get; private set; }
    
    // Profit generated by this Bot (may be negative!)
    public decimal Profit { get; private set; }
    
    // How many times the trading strategy was executed
    public uint TimesExecuted { get; private set; }
    
    // How many times the trading strategy threw an exception
    public uint TimesFailed { get; private set; }
    
    // The current error state. Includes info on what error occurred and when
    public BotError? ErrorState { get; set; }
    
    public TradingBot(string name) {
        Id = Ksuid.Generate();
        Name = name;
    }
    
    public void AllocateFunds(decimal amount) {
        Funds += amount;
    }
    
    public void AddProfit(decimal amount) {
        Profit += amount;
    }

    public void ExecuteStrategy(BotExecutionContext context) {
        if (Strategy == null) {
            throw new NullReferenceException(this.ToFormattedString() + " has a null trading strategy.");
        }
        ++TimesExecuted;
        try {
            Strategy.Execute(context);
        }
        catch (Exception) {
            ++TimesFailed;
            throw;
        }
    }
    
    public override string ToString() {
        return this.ToFormattedString();
    }
}